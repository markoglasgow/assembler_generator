// Example instructions for x86
// mov eax, dword ptr[eax]
// mov ax, word ptr[eax]
// mov eax, byte ptr[eax]
// 
// mov al, byte ptr[eax]
// 
// mov eax, ebx
// mov al, bl
// 
// mov eax, 1
// mov al, 1

// x86 instruction encoding:
// http://www.c-jump.com/CIS77/CPU/x86/lecture.html

////////////////////////////////////////
.BIT_FIELDS

name: prefix
size: 8

name: opcode
size: 6

name: opcode_d
size: 1

name: opcode_s
size: 1

name: mod
size: 2

name: reg
size: 3

name: rm
size: 3

name: scale
size: 2

name: index
size: 3

name: base
size: 3

name: displacement
size: 8

name: immediate_8
size: 8

name: immediate_16
size: 16

name: immediate_32
size: 32

////////////////////////////////////////
.ASM_INSTRUCTIONS

INSTRUCTION = 
| %MNEMONIC_2OPS% %TWO_OPERANDS%
;

MNEMONIC_2OPS =
| mov                                           :: opcode=1000 10
| xor                                           :: opcode=0011 00
;

TWO_OPERANDS =
| %8_BIT_REG%, %8_BIT_IMMEDIATE%                :: opcode_d=1 :: opcode_s=0
| %8_BIT_REG%, %8_BIT_MEM_OP%                   :: opcode_d=1 :: opcode_s=0
| %8_BIT_REG%, %8_BIT_REG_RM%                   :: opcode_d=1 :: opcode_s=0 :: mod=11

| %8_BIT_MEM_OP%, %8_BIT_REG%                   :: opcode_d=0 :: opcode_s=0
| %8_BIT_MEM_OP%, %8_BIT_IMMEDIATE%             :: opcode_d=0 :: opcode_s=0

| %16_BIT_REG%, %16_BIT_IMMEDIATE%              :: opcode_d=1 :: opcode_s=1 :: prefix = 0110 0110
| %16_BIT_REG%, %16_BIT_MEM_OP%                 :: opcode_d=1 :: opcode_s=1 :: prefix = 0110 0110
| %16_BIT_REG%, %16_BIT_REG_RM%                 :: opcode_d=1 :: opcode_s=1 :: mod=11 :: prefix = 0110 0110            

| %16_BIT_MEM_OP%, %16_BIT_REG%                 :: opcode_d=0 :: opcode_s=1 :: prefix = 0110 0110
| %16_BIT_MEM_OP%, %16_BIT_IMMEDIATE%           :: opcode_d=0 :: opcode_s=1 :: prefix = 0110 0110

| %32_BIT_REG%, %32_BIT_IMMEDIATE%              :: opcode_d=1 :: opcode_s=1
| %32_BIT_REG%, %32_BIT_MEM_OP%                 :: opcode_d=1 :: opcode_s=1
| %32_BIT_REG%, %32_BIT_REG_RM%                 :: opcode_d=1 :: opcode_s=1 :: mod=11                 

| %32_BIT_MEM_OP%, %32_BIT_REG%                 :: opcode_d=0 :: opcode_s=1  
| %32_BIT_MEM_OP%, %32_BIT_IMMEDIATE%           :: opcode_d=0 :: opcode_s=1
;

8_BIT_REG =
| al                                            :: reg=000
| bl                                            :: reg=011
;

8_BIT_REG_RM =
| al                                            :: rm=000
| bl                                            :: rm=011
;

POINTER = 
| ptr[%32_BIT_REG_RM%]                          :: mod=00
| ptr[%32_BIT_IMMEDIATE%]
;

8_BIT_MEM_OP = 
| byte %POINTER%
;

8_BIT_IMMEDIATE = 
| int_unsigned_8_bits
| int_signed_8_bits
;

16_BIT_REG =
| ax                                            :: reg=000
| bx                                            :: reg=011
;

16_BIT_REG_RM =
| ax                                            :: rm=000
| bx                                            :: rm=011
;

16_BIT_MEM_OP =
| word %POINTER%
;

16_BIT_IMMEDIATE =
| int_unsigned_16_bits
| int_signed_16_bits
;

32_BIT_REG =
| eax                                           :: reg=000
| ebx                                           :: reg=011
;

32_BIT_REG_RM =
| eax                                           :: rm=000
| ebx                                           :: rm=011
;

32_BIT_MEM_OP = 
| dword %POINTER%
;

32_BIT_IMMEDIATE = 
| int_unsigned_32_bits
| int_signed_32_bits
;

////////////////////////////////////////