// Example instructions for x86
// mov eax, dword ptr[eax]
// mov ax, word ptr[eax]
// mov eax, byte ptr[eax]
// 
// mov al, byte ptr[eax]
// 
// mov eax, ebx
// mov al, bl
// 
// mov eax, 1
// mov al, 1

// x86 instruction encoding:
// http://www.c-jump.com/CIS77/CPU/x86/lecture.html

////////////////////////////////////////
.BIT_FIELDS

name: prefix
size: 8

name: short_opcode
size: 5

name: opcode
size: 6

name: opcode_d
size: 1

name: opcode_s
size: 1

name: mod
size: 2

name: reg
size: 3

name: rm
size: 3

name: scale
size: 2

name: index
size: 3

name: base
size: 3

name: displacement
size: 8

name: immediate_8
size: 8

name: immediate_16
size: 16

name: immediate_32
size: 32

////////////////////////////////////////
.ASM_INSTRUCTIONS

INSTRUCTION = 
| %DATA_STATEMENT%
| %JUMP_IMMEDIATE%
| %PUSH_INSTRUCTION%
| %MOV_REG_IMMEDIATE%
| %OP_32REG_8BITVAL%
| %CALL_REG%
| %MOV_OPERAND_IMMEDIATE32%
| %MNEMONIC_2OPS% %TWO_OPERANDS%
;

DATA_STATEMENT = 
| db int_8_bits									:: immediate_8=%int_8_bits%
| dw int_16_bits								:: immediate_16=%int_16_bits%
| dd int_32_bits								:: immediate_32=%int_32_bits%
;

JUMP_IMMEDIATE =
| jmp label_x86_rel_32_bit_branch               :: opcode=1110 10 :: opcode_d=0 :: opcode_s=1 :: immediate_32=%label_x86_rel_32_bit_branch%
;

PUSH_INSTRUCTION = 
| push %32_BIT_REG%								:: short_opcode=0101 0
| push %32_BIT_IMMEDIATE%                       :: opcode=0110 10 :: opcode_d=0 :: opcode_s=0
;

CALL_REG =
| call %32_BIT_REG%								:: prefix = 1111 1111 :: short_opcode = 1101 0
;

MOV_REG_IMMEDIATE = 
| mov %8_BIT_REG%, %8_BIT_IMMEDIATE%            :: short_opcode=10110
| mov %16_BIT_REG%, %16_BIT_IMMEDIATE%          :: short_opcode=10111 :: prefix = 0110 0110
| mov %32_BIT_REG%, %32_BIT_IMMEDIATE%          :: short_opcode=10111
;

MOV_OPERAND_IMMEDIATE32 =
| mov %32_BIT_MEM_OP%, %32_BIT_IMMEDIATE%       :: opcode=1100 01 :: opcode_d=1 :: opcode_s=1 :: reg=000 :: scale=00 :: index=100 :: base=100
;

OP_32REG_8BITVAL = 
| %MNEMONIC_2OPS_SHORT% %32_BIT_REG_RM%, %8_BIT_IMMEDIATE%				:: opcode_d=1 :: opcode_s=1 :: mod=11
;

MNEMONIC_2OPS_SHORT =
| sub                                           :: opcode=1000 00 :: reg=101
;

MNEMONIC_2OPS =
| mov                                           :: opcode=1000 10
| xor                                           :: opcode=0011 00
;

TWO_OPERANDS =
| %8_BIT_REG%, %8_BIT_MEM_OP%                   :: opcode_d=1 :: opcode_s=0
| %8_BIT_REG%, %8_BIT_REG_RM%                   :: opcode_d=1 :: opcode_s=0 :: mod=11

| %8_BIT_MEM_OP%, %8_BIT_REG%                   :: opcode_d=0 :: opcode_s=0
| %8_BIT_MEM_OP%, %8_BIT_IMMEDIATE%             :: opcode_d=0 :: opcode_s=0

| %16_BIT_REG%, %16_BIT_MEM_OP%                 :: opcode_d=1 :: opcode_s=1           :: prefix = 0110 0110
| %16_BIT_REG%, %16_BIT_REG_RM%                 :: opcode_d=1 :: opcode_s=1 :: mod=11 :: prefix = 0110 0110            

| %16_BIT_MEM_OP%, %16_BIT_REG%                 :: opcode_d=0 :: opcode_s=1           :: prefix = 0110 0110
| %16_BIT_MEM_OP%, %16_BIT_IMMEDIATE%           :: opcode_d=0 :: opcode_s=1           :: prefix = 0110 0110

| %32_BIT_REG%, %32_BIT_MEM_OP%                 :: opcode_d=1 :: opcode_s=1
| %32_BIT_REG%, %32_BIT_REG_RM%                 :: opcode_d=1 :: opcode_s=1 :: mod=11                 

| %32_BIT_MEM_OP%, %32_BIT_REG%                 :: opcode_d=0 :: opcode_s=1  
;

8_BIT_REG =
| al                                            :: reg=000
| bl                                            :: reg=011
;

8_BIT_REG_RM =
| al                                            :: rm=000
| bl                                            :: rm=011
;

POINTER = 
| ptr[%32_BIT_REG_RM%]                          :: mod=00
| ptr[%32_BIT_IMMEDIATE%]
;

8_BIT_MEM_OP = 
| byte %POINTER%
;

8_BIT_IMMEDIATE = 
| int_8_bits                                    :: immediate_8=%int_8_bits%
;

16_BIT_REG =
| ax                                            :: reg=000
| bx                                            :: reg=011
;

16_BIT_REG_RM =
| ax                                            :: rm=000
| bx                                            :: rm=011
;

16_BIT_MEM_OP =
| word %POINTER%
;

16_BIT_IMMEDIATE =
| int_16_bits                                   :: immediate_16=%int_16_bits%
;

32_BIT_REG =
| eax                                           :: reg=000
| ecx                                           :: reg=001
| edx                                           :: reg=010
| ebx                                           :: reg=011
| esp											:: reg=100
| ebp											:: reg=101
| esi											:: reg=110
| edi 											:: reg=111
;

32_BIT_REG_RM =
| eax                                           :: rm=000
| ecx                                           :: rm=001
| edx                                           :: rm=010
| ebx                                           :: rm=011
| esp											:: rm=100
| ebp											:: rm=101
| esi											:: rm=110
| edi 											:: rm=111
;

32_BIT_MEM_OP = 
| dword %POINTER%
;

32_BIT_IMMEDIATE = 
| int_32_bits                                   :: immediate_32=%int_32_bits%
| label_x86_imm_32_bits                         :: immediate_32=%label_x86_imm_32_bits%
;

////////////////////////////////////////